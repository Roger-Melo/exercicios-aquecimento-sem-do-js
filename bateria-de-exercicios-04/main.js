/*
Se o exerc√≠cio n√£o especificou nome do identificador (vari√°vel, 
par√¢metro, propriedade, fun√ß√£o), declare ele com o nome de sua 
prefer√™ncia. 

Quando um exerc√≠cio pedir para voc√™ criar uma fun√ß√£o, escolha 
a forma de declara√ß√£o de fun√ß√£o que voc√™ preferir.

Mas arrow function √© mais legal üòÅ
*/

/*
01

Crie uma fun√ß√£o que recebe dois par√¢metros e retorna o resultado 
da multiplica√ß√£o deles.
*/



/*
02

Declare um objeto e armazene-o em uma const.

O objeto deve ter uma propriedade armazenando 7 e outra 
armazenando 3.

Invoque a fun√ß√£o que voc√™ criou acima e passe como argumentos 
os n√∫meros do objeto. 

A invoca√ß√£o da fun√ß√£o deve retornar 21.
*/



/*
03

Declare um array e armazene-o em uma const.

O array deve ter os itens 5 e 7.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros do array. 

A invoca√ß√£o da fun√ß√£o deve retornar 35.
*/



/*
04

Crie uma fun√ß√£o pegaNumerosImpares que retorna um array com os 
n√∫meros 5, 3 e 9.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros 3 e 9 do array. 

N√£o armazene os retornos da invoca√ß√£o de pegaNumerosImpares 
em consts.

A invoca√ß√£o da fun√ß√£o que voc√™ criou no exerc√≠cio 01 deve 
retornar 27.
*/



/*
05

Crie uma fun√ß√£o pegaObj que retorna um array com 3 objetos. 

Cada objeto deve ter uma propriedade numero.

A propriedade numero do primeiro objeto deve armazenar 2.

A propriedade numero do segundo objeto deve armazenar 4.

E a propriedade numero do terceiro objeto deve armazenar 6.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros 2 e 6 dos objetos. 

N√£o armazene os retornos da invoca√ß√£o de pegaObj em consts.

A invoca√ß√£o da fun√ß√£o que voc√™ criou no exerc√≠cio 01 deve 
retornar 12.
*/



/*
06

Crie uma fun√ß√£o pegaRespostasUsuario que retorna um array com os 
itens 'A', 'B', 'A' e 'D'.
*/



/*
07

Crie uma fun√ß√£o pegaPontuacao que cont√©m um par√¢metro 
respostasUsuario.

Na primeira linha da fun√ß√£o, crie uma const que armazena o √∫ltimo 
item do array que voc√™ declarou no exerc√≠cio acima. Armazene o 
item usando o par√¢metro respostasUsuario e sintaxe de colchetes. 
N√£o invoque a fun√ß√£o que voc√™ criou no exerc√≠cio anterior. 

Abaixo da const, crie uma let pontuacao que recebe zero. 

Se a const que voc√™ declarou na primeira linha da fun√ß√£o √© igual 
a 'A', atribua a pontuacao o valor que ela tem somado a 50.

Sen√£o, se a const √© igual a 'C', atribua a pontuacao o valor que 
ela tem somado a 25.

Sen√£o, atribua a pontuacao o valor que ela tem somado a 100.

Na √∫ltima linha dentro do bloco da fun√ß√£o, retorne pontuacao.
*/



/*
08

Crie uma const respostasUsuario que armazena o retorno da 
invoca√ß√£o de pegaRespostasUsuario.

Invoque pegaPontuacao e passe respostasUsuario como argumento.

A invoca√ß√£o de pegaPontuacao deve retornar 100.
*/



/*
09

Fa√ßa o c√≥digo da fun√ß√£o pegaPontuacao ser imut√°vel. 

Isto √©, elimine da fun√ß√£o qualquer ocorr√™ncia de reatribui√ß√£o. 

Dicas: 

A palavra-chave return pode ser inserida dentro de bloco de if, 
else if ou else. 

O √∫nico requisito para voc√™ usar return √© ele estar dentro de uma 
fun√ß√£o.
*/
